#+author: Alejandro Gallo
#+title: Wavecar.hpp
#+options: num:nil
* Wavecar.hpp
  :PROPERTIES:
  :header-args:c+++: :tangle include/Wavecar.hpp
  :header-args:c+++: :main no
  :END:
** Introduction
This package implements a C++11 header-only library
for reading =WAVECAR= files in the =VASP5= format.

It is written as a literate program cite:LiteratePrograKnuth1984,
so we will try to keep the documentation and the code in the same place.

As a convenience you can find the header file in the =include= directory.

** Header
We will only need libraries available in the standard library:

#+begin_src c++
#include <iostream>
#include <fstream>
#include <map>
#include <array>
#include <assert.h>
#include <string>
#include <numeric>
#include <algorithm>
#include <vector>
#include <math.h>
#include <complex>
#+end_src

** Main types
We define the main structure for the WAVECAR header,

#+begin_src c++
using CellVector = std::array<double, 3>;

struct Cell {
  std::array<CellVector, 3> basis;
  double volume;
};

struct WavecarHeader {
  size_t recordLength;
  size_t nSpin;
  size_t version;
  size_t nKpoints;
  size_t nBands;
  size_t encut;
  double eFermi;
  size_t nPlaneWaves;
  Cell real, reciprocal;
};

using KPoint = CellVector;
using OrbitalCoefficients = std::vector<std::complex<double>>;
struct HorizontalBand {
  std::vector<double> realEnergies;
  std::vector<double> imagEnergies;
  std::vector<double> occupancies;
  std::vector<OrbitalCoefficients> coefficients;
};
using KBand = std::pair<KPoint, HorizontalBand>;

struct WaveDescriptor {
  std::vector<KBand> bands;
  inline size_t nKpoints() { return bands.size(); }
};

struct Wavecar {
  WavecarHeader header;
  std::vector<WaveDescriptor> descriptors;
};
#+end_src

** Mathematical functions
*** Products
#+begin_src c++
CellVector crossProduct(const CellVector &a, const CellVector &b) {
  return
    { a[1] * b[2] - a[2] * b[1]
    , a[2] * b[0] - a[0] * b[2]
    , a[0] * b[1] - a[1] * b[0]
    };
}

double dotProduct(const CellVector &a, const CellVector &b) {
  return std::inner_product(a.begin(), a.end(), b.begin(), 0.0);
}
#+end_src


*** Cell volume
We can use the products to calculate the cell volume given by a basis
#+begin_src c++
double cellVolume(const Cell &c) {
  return
    dotProduct( c.basis[0]
              , crossProduct( c.basis[1]
                            , c.basis[2]
                            )
              );
}
#+end_src

*** Reciprocal cell
Here we calculate the reciprocal cell of a given cell
#+begin_src c++
Cell reciprocalCell(const Cell &c) {
  Cell r;
  for (size_t i=0; i<3; i++) {
    auto itB(r.basis[i].begin());
    r.basis[i] = crossProduct( c.basis[(i+1) % 3]
                             , c.basis[(i+2) % 3]);
    std::transform( itB, itB + 3, itB
                  , [&c](double i){ return i*2*M_PI/c.volume; });
  }
  r.volume = cellVolume(r);
  return r;
}
#+end_src

** =WAVECAR= parsing
*** Understanding the code

It can be quite challenging sometimes to understand binary formats
coming from Fortran, or binary formats in general. It is quite instructive
to peek into the binary structure of the files and try to
backwards engineer the main structure of the file.

Here is an excerpt of a hexdump of a typical =VASP5= format =WAVECAR= file:

#+caption: Excerpt of a hexdump of a typical =WAVECAR= file.
#+begin_figure
#+begin_example
                  BYTES      
 ADDRESS  1 2  3 4  4 6  7 8  | Comments
==============================|=========
00000000: 0000 0000 0018 d940 | Fortran record length
00000008: 0000 0000 0000 f03f | number of spin channels
00000010: 0000 0000 8006 ea40 | format version (RTAG)
00000018: 0000 0000 0000 0000 |
,*                               (zero padding)
00006460: 0000 0000 0000 f03f | Number of k-points
00006468: 0000 0000 0020 b940 | Number of bands
00006470: 0000 0000 00e0 8540 | ENCUT
00006478: ba49 0c02 2b07 1140 | a[1,1] (lattice vectors)
00006480: ba49 0c02 2b07 1140 | a[1,2]
00006488: 0000 0000 0000 0000 | a[1,3]
00006490: 0000 0000 0000 0000 | a[2,1]
00006498: ba49 0c02 2b07 1140 | a[2,2]
000064a0: ba49 0c02 2b07 1140 | a[2,3]
000064a8: ba49 0c02 2b07 1140 | a[3,1]
000064b0: 0000 0000 0000 0000 | a[3,2]
000064b8: ba49 0c02 2b07 1140 | a[3,3]
000064c0: 1a6f 1d53 35e9 0540 | fermi energy
000064c8: 0000 0000 0000 0000 |
,*                               (zero padding)
0000c8c0: 0000 0000 0018 a940 | number of plane waves
0000c8c8: 0000 0000 0000 0000 | kpoint[0]  \
0000c8d0: 0000 0000 0000 0000 | kpoint[1]   > Gamma point
0000c8d8: 0000 0000 0000 0000 | kpoint[2]  /
0000c8e0: f1e1 932b 1cee 56c0 | energy-real     x
0000c8e8: 0000 0000 0000 0000 | energy-complex  0
0000c8f0: 0000 0000 0000 f03f | occupation      1
#+end_example
#+end_figure

Here there are a couple of things we should remark,
- =VASP5= format writes out everything using floating point numbers,
  even quantities that ought to be integers, this is done so that the
  binary format is compatible throughout machines (and most programming
  languages) since they follow IEEE standards.
- Fortran can use an offset to read different parts of a file
  separated in records. The first quantity we get in the =WAVECAR=
  is this record length. In this particular case it is equal
  to =25696= or =0x6460= in hexadecimal notation.
  Notice that this is equal the address where the =WAVECAR=
  header begins by providing the number of \( k \)-points.
- The second time this record length arises, is when
  the first chunk of data for the wavefunction arises, i.e.
  ~2*25696 = 0xc8c0~, where we obtain for the first spin
  channel and first \( k \)-point
    - the number of plane-waves
    - the real part of the eigenenergies
    - the complex part of the eigenenergies
    - the occupation numbers
    - the plane-wave coefficients.

*** Wave descriptor

  #+begin_src c++
KBand
readWaveWaveDescriptor( const std::string &fileName
                      , const WavecarHeader &header
                      , const size_t &spinIndex
                      ) {

  std::vector<double> realEnergies(header.nBands)
    , imagEnergies(header.nBands)
    , occupancies(header.nBands)
    ;

  double buffer;
  std::fstream file(fileName, std::ios::binary | std::ios::in);
  size_t numberPlaneWaves;
  CellVector kpoint;
  std::vector<OrbitalCoefficients> coefficients;

  file.seekg((spinIndex + 2) * header.recordLength);

  // read numberPlaneWaves
  file.read((char*)&buffer, sizeof(double));
  numberPlaneWaves = size_t(buffer);

  //C.resize(header.nBands * numberPlaneWaves);

  file.read((char*)&kpoint, 3*sizeof(double));

  for (size_t n=0; n < header.nBands; n++) {
    file.read((char*)(realEnergies.data() + n), sizeof(double));
    file.read((char*)(imagEnergies.data() + n), sizeof(double));
    file.read((char*)(occupancies.data() + n), sizeof(double));
  }

  for (size_t n=0; n < header.nBands; n++) {
    OrbitalCoefficients C;
    C.resize(numberPlaneWaves);
    coefficients.push_back(C);
    file.read((char*)C.data(), numberPlaneWaves * 2 * sizeof(double));
  }

  return { kpoint
         , {realEnergies, imagEnergies, occupancies, coefficients}
         };

}
  #+end_src

  #+RESULTS:

*** Header

  #+begin_src c++
WavecarHeader readWavecarHeader(const std::string &fileName) {
  WavecarHeader header;
  std::fstream file(fileName, std::ios::binary | std::ios::in);
  double buffer;
  std::vector<double> vvbuffer;

  assert(sizeof(double) == 8);
  assert(sizeof(header.real.basis) == 72);
  assert(sizeof(CellVector) == 3 * sizeof(double));

  file.read((char*)&buffer, sizeof(double));
  header.recordLength = size_t(buffer);
  file.read((char*)&buffer, sizeof(double));
  header.nSpin = size_t(buffer);
  file.read((char*)&buffer, sizeof(double));
  header.version = size_t(buffer);

  if (header.version != 53300)
    throw "This program only supports VASP5 format (RTAG: 53300)";

  file.seekg(header.recordLength);

  file.read((char*)&buffer, sizeof(double));
  header.nKpoints = size_t(buffer);
  file.read((char*)&buffer, sizeof(double));
  header.nBands = size_t(buffer);
  file.read((char*)&buffer, sizeof(double));
  header.encut = size_t(buffer);

  // Setup real cell
  file.read((char*)&header.real.basis, sizeof(header.real.basis));
  header.real.volume = cellVolume(header.real);

  file.read((char*)&buffer, sizeof(double));
  header.eFermi = buffer;

  // Setup Reciprocal cell
  header.reciprocal = reciprocalCell(header.real);



  return header;
}
  #+end_src

*** The whole =WAVECAR=
  #+begin_src c++
Wavecar readWavecar(const std::string &fileName) {
  auto header(readWavecarHeader(fileName));
  std::vector<WaveDescriptor> descriptors;

  for (uint8_t i=0; i < header.nSpin; i++) {
    WaveDescriptor descriptor;
    for (size_t k=0; k < header.nKpoints; k++) {
      auto kBand(readWaveWaveDescriptor(fileName, header, i));
      descriptor.bands.push_back(kBand);
    }
    descriptors.push_back(descriptor);
  }
  return {header, descriptors};

}
  #+end_src


** =WAVECAR= writing

Our writer writes =WAVECAR= files in the =VASP5= version.

*** =CellVector=
 #+begin_src c++
void writeToWavecar(std::ofstream &f, const CellVector &v) {
  f.write((char*)v.data(), sizeof(CellVector));
}
 #+end_src


*** =Cell=
In the case of a cell we only write the basis elements in order,
#+begin_src c++
void writeToWavecar(std::ofstream &f, const Cell &c) {
  for (const auto& v: c.basis) writeToWavecar(f, v);
}
#+end_src

*** =WavecarHeader=
In the case of the =WavecarHeader= we have to make sure the order is the
correct one that =VASP= is expecting.

#+begin_src c++
void writeToWavecar(std::ofstream &f, const WavecarHeader &h) {
  const auto writeInt
    = [&f](const size_t &i) {
        const double j(i);
        f.write((char*)&j, sizeof(double));
    };
  writeInt(h.recordLength);
  writeInt(h.nSpin);
  writeInt(h.version);

  f.seekp(h.recordLength);

  writeInt(h.nKpoints);
  writeInt(h.nBands);
  writeInt(h.encut);

  writeToWavecar(f, h.real);
  f.write((char*)&h.eFermi, sizeof(double));
}
#+end_src

*** =WaveDescriptor=
#+begin_src c++
void writeToWavecar(std::ofstream &f, const WaveDescriptor &d) {
  for (auto const& kband: d.bands)  { // spin loop
    const auto& kVector(kband.first);
    const auto& vband(kband.second);
    const double numberPlaneWaves(vband.coefficients[0].size());

    f.write((char*)&numberPlaneWaves, sizeof(double));
    writeToWavecar(f, kVector);

    for (size_t n(0); n < vband.realEnergies.size(); n++) {
      f.write((char*)&vband.realEnergies[n], sizeof(double));
      f.write((char*)&vband.imagEnergies[n], sizeof(double));
      f.write((char*)&vband.occupancies[n], sizeof(double));
    }

    for (size_t n(0); n < vband.realEnergies.size(); n++) {
      f.write((char*)vband.coefficients[n].data(),
              numberPlaneWaves * 2 * sizeof(double));
    }

  }
}
#+end_src

*** =Wavecar=
Writing a =WAVECAR= consists in writing first the header
and then the wave descriptor.
#+begin_src c++
void writeToWavecar(std::ofstream &f, const Wavecar &w) {
  writeToWavecar(f, w.header);

  for (size_t ispin(0); ispin < w.descriptors.size(); ispin++) {
    f.seekp((ispin + 2) * w.header.recordLength);
    writeToWavecar(f, w.descriptors[ispin]);
  }

}
#+end_src


** G grid

#+begin_src c++

using GGrid = std::pair<KPoint, std::vector<CellVector>>;
using HorizontalGrid = std::vector<GGrid>;
constexpr double hbarConst = 0.26246582250210965422;

std::vector<HorizontalGrid>
mkGrid(const Wavecar &wavecar) {
  std::vector<HorizontalGrid> result;

  for (const auto& descriptor: wavecar.descriptors) {

    HorizontalGrid hGrid;

    for (const auto& kBand: descriptor.bands) {


    size_t count(0);
    const double actualNumberOfPlaneWaves = kBand.second.coefficients[0].size();

    const auto& K(kBand.first);
    std::vector<CellVector> gs(actualNumberOfPlaneWaves);

    const int numberOfPlaneWaves
      = 3 * std::ceil(std::pow(actualNumberOfPlaneWaves, 1.0/3));

    for (int z(0); z < 2 * numberOfPlaneWaves; z++) {
    for (int y(0); y < 2 * numberOfPlaneWaves; y++) {
    for (int x(0); x < 2 * numberOfPlaneWaves; x++) {

      const auto& cell(wavecar.header.reciprocal);
      const int G_i[]
        = { x > numberOfPlaneWaves ? x - 2 * numberOfPlaneWaves : x
          , y > numberOfPlaneWaves ? y - 2 * numberOfPlaneWaves : y
          , z > numberOfPlaneWaves ? z - 2 * numberOfPlaneWaves : z
          };

      double energy(0);
      CellVector g;
      for (size_t i(0); i < 3; i++) {
        double component
          = cell.basis[0][i] * ((double)G_i[0])
          + cell.basis[1][i] * ((double)G_i[1])
          + cell.basis[2][i] * ((double)G_i[2])
          ;
        component += K[i];

        g[i] = component;
        energy += component * component / hbarConst;
      }

      if (energy < wavecar.header.encut) {
        count++;
        gs[count] = g;
      }

    } // z
    } // y
    } // x

    if (count != actualNumberOfPlaneWaves)
      throw "Count and actualNumberOfPlaneWaves are different";

    hGrid.push_back({K, gs});

  } // kBand

    result.push_back(hGrid);

  } // descriptor

  return result;

}
#+end_src
* Tests
  :PROPERTIES:
  :header-args:c+++: :main no
  :header-args:c+++: :mkdirp t
  :END:
** Main function
  :PROPERTIES:
  :header-args:c+++: :tangle tests/wavecar-show.cpp
  :END:
#+begin_src c++
#include <Wavecar.hpp>

int main (int argc, char **argv) {

  std::cout << ">>> Parsing WAVECAR" << std::endl;
  auto wavecar(readWavecar("WAVECAR"));
  auto& header(wavecar.header);

  std::cout << "recordLength: " << header.recordLength << "\n"
            << "nSpin: " << header.nSpin << "\n"
            << "version: " << header.version << "\n"
            << "nKpoints: " << header.nKpoints << "\n"
            << "nBands: " << header.nBands << "\n"
            << "encut: " << header.encut << "\n"
            << "eFermi: " << header.eFermi << "\n"
            << "volume: " << header.real.volume << "\n"
            << "\n";

  std::cout << ">>> Creating grids" << std::endl;
  auto grids(mkGrid(wavecar));
  std::cout << grids.size() << " grids created" << std::endl;

  std::cout << "Lattice vectors: \n";
  for (const auto &b: header.real.basis)
    printf("  %f %f %f\n", b[0], b[1], b[2]);

  std::cout << "Reciprocal vectors: \n";
  for (const auto &b: header.reciprocal.basis)
    printf("  %f %f %f\n", b[0], b[1], b[2]);

  auto wavecar2(std::ofstream("WAVECAR-2", std::ios::binary));
  std::cout << "Writing WAVECAR-2" << std::endl;
  writeToWavecar(wavecar2, wavecar);

}
#+end_src






bibliographystyle:unsrt
bibliography:README.bib
#+begin: papis-bibtex-refs :tangle /home/gallo/software/wavecar.hpp/README.bib
#+begin_src bibtex :exports none :tangle /home/gallo/software/wavecar.hpp/README.bib
@article{LiteratePrograKnuth1984,
  author = {Knuth, D. E.},
  doi = {10.1093/comjnl/27.2.97},
  issn = {0010-4620},
  issue = {2},
  journal = {The Computer Journal},
  language = {en},
  month = {2},
  pages = {97--111},
  publisher = {Oxford University Press (OUP)},
  title = {Literate Programming},
  url = {http://dx.doi.org/10.1093/comjnl/27.2.97},
  volume = {27},
  year = {1984},
}

#+end_src

#+
* Notes

#+begin_src f90
TYPE wavedes
    REAL(q) RSPIN                 ! spin multiplicity
    REAL(q) ENMAX                 ! energy cutoff
    INTEGER NRSPINORS             ! number of spinors (1 for collinear, 2 for non collinear)
    INTEGER NGDIM                 ! first dimension of any array related to the plane wave basis
    INTEGER NRPLWV                ! first dimension of wavefunction array
    ! collinear:  NRPLWV=NGDIM, noncollinear:  NRPLWV=2*NGDIM
    INTEGER NRPLWV_RED            ! local number of coefficients in wave function array after data redistribution
    INTEGER NPROD                 ! first dimension of projected wave array
    INTEGER NPRO                  ! local number of elements in projected wave array
    INTEGER NPRO_TOT              ! total number of elements (summed over all nodes)
    ! NPRO, NPROD, and NPRO_TOT are all doubled in the non collinear version
    INTEGER NPROD_RED             ! dimension of projected wave array after redistribution
    INTEGER NBANDS                ! local number of bands
    INTEGER NB_TOT                ! total number bands
    INTEGER NB_PAR                ! distribution over bands (number of bands done in parallel )= WDES%COMM_INTER%NCPU
    INTEGER NSIM                  ! band blocking (mainly for seriel version)
    INTEGER NB_LOW                ! lowest band index in global
    INTEGER NKDIM                 ! total number of k-points in the entire Brillouin zone (BZ)
    ! required for HF calculations (otherwise equal to NKPTS)
    INTEGER NKPTS_FOR_GEN_LAYOUT  ! number of k-points used for the generation of the data layout
    ! this must not change when the number of k-point changes
    INTEGER NKPTS                 ! number of k-points in the irreducable wedge of the BZ (IBZ)
    INTEGER ISPIN                 ! number of spins
    INTEGER NCDIJ                 ! dimension of arrays like CDIJ, CQIJ
    INTEGER NIONS                 ! number of ions stored locally 
    INTEGER NTYP                  ! number of types stored locally
    TYPE (grid_3d), POINTER ::GRID! pointer to a grid if FFT's are required
    INTEGER,POINTER :: NPLWKP(:)  ! number of coefficients for each k-point and band per node
    INTEGER,POINTER :: NGVECTOR(:)! number of G-vectors in the basis for each k-point per node
    ! collinear: NPLWKP= NGVECTOR, noncollinear NPLWKP = 2*NGVECTOR 
    ! NGVECTOR is the same for collinear and non collinear calculations
    ! (summed over nodes, doubled in the non collinear case)
    INTEGER,POINTER :: NGVECTOR_POS(:)! sum of NGVECTOR up to (but not including) the current node
    INTEGER,POINTER :: NPLWKP_TOT(:)  ! total number of coefficients in plane wave array at each k-points
    INTEGER,POINTER :: NB_TOTK(:,:)! number of bands to be calculated for each k-point and spin
    ! possibly smaller than NB_TOT
    INTEGER         :: NCOL       ! number of columns
    INTEGER,POINTER,CONTIGUOUS :: PL_INDEX(:,:) ! index a column would have in serial version
    INTEGER,POINTER,CONTIGUOUS :: PL_COL(:,:)! number of plane wave in this column
    INTEGER,POINTER ::NPRO_POS(:) ! for each atom, start index of entries in CPROJ in serial version
    INTEGER,POINTER :: LMMAX(:)   ! total number of NLM quantum numbers for each type
    INTEGER,POINTER :: LMBASE(:)  !
    INTEGER,POINTER :: NITYP(:)   ! number of ions stored locally for each type
    INTEGER,POINTER :: ITYP(:)    ! type for each ion
    INTEGER,POINTER ::NT_GLOBAL(:)! global type index for this type 
    REAL(q),POINTER :: VKPT(:,:)  ! coordinate of k-point
    REAL(q),POINTER :: WTKPT(:)   ! symmetry weight-factor for each k-point
    INTEGER,POINTER,CONTIGUOUS :: NINDPW(:,:)! index to the FFT box for each pw comp and k-point
    LOGICAL,POINTER,CONTIGUOUS :: LUSEINV(:) ! for each k-point decides whether reduced G grid can be used (compare AT_GAMMA)
    INTEGER,POINTER,CONTIGUOUS :: NINDPW_INV(:,:)! index to the FFT box for each pw comp and k-point to the G vector -G-k
    REAL(q),POINTER,CONTIGUOUS :: FFTSCA(:,:,:)  ! scaling index if plane wave coefficients are reduced (LUSEINV .TRUE.)
    INTEGER,POINTER,CONTIGUOUS :: MAP_TO_FULL(:,:,:) ! map from half-grid mode to full grid mode
    INTEGER,POINTER,CONTIGUOUS :: IGX(:,:)   ! x index of each pw comp and k-point
    INTEGER,POINTER,CONTIGUOUS :: IGY(:,:)   ! y index of each pw comp and k-point
    INTEGER,POINTER,CONTIGUOUS :: IGZ(:,:)   ! z index of each pw comp and k-point
    REAL(q),POINTER,CONTIGUOUS :: DATAKE(:,:,:) ! kinetic energy for each plane wave
    ! last index labels up and down components
    ! of the spinor in case of spin spirals
    REAL(q) QSPIRAL(3)            ! propagation vector of spin spiral
    TYPE(communic),POINTER  :: COMM,COMM_INTER,COMM_INB
    TYPE(communic),POINTER  :: COMM_KINTER,COMM_KIN
    TYPE(communic),POINTER  :: COMM_SHMEM,COMM_intra_node,COMM_inter_node
    REAL(q) SAXIS(3)              ! quantisation axis of the spin operator
! TODO maybe AT_GAMMA should be removed
    LOGICAL,POINTER :: AT_GAMMA(:)! indicates that a k-point corresponds to gamma
                                  ! selects special treatment
    LOGICAL LORBITALREAL          ! special treatment at gamma
    LOGICAL LOVERL                ! overlap required
    LOGICAL DO_REDIS              ! data redistribution required
    LOGICAL LNONCOLLINEAR         ! noncollinear calculations
    LOGICAL LSORBIT               ! spin orbit coupling
    LOGICAL LGAMMA                ! gamma point only, projected wavefunction character is REAL
                                  ! this is only .TRUE. if precompiler flag gammareal is define 
    LOGICAL LSPIRAL               ! calculate spin spirals?
    LOGICAL LZEROZ                ! set m_z to zero in SET_CHARGE?
    INTEGER NBANDSLOW             ! lowest band to be optimized (-1 no restrictions)
    INTEGER NBANDSHIGH            ! highest band to be optimized (-1 no restrictions)
END TYPE wavedes
#+end_src

- At each k-point there are maybe different number of nbands, and pw coefficients.
  
